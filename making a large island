class Solution {
public:
    int largestIsland(std::vector<std::vector<int>>& grid) {
        int n = grid.size();
        std::unordered_map<int, int> regionsArea;
        regionsArea[0] = 0;
        int region = 2;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int area = floodFill(grid, i, j, region);
                    regionsArea[region] = area;
                    region++;
                }
            }
        }

        int max = regionsArea.count(2) ? regionsArea[2] : 0;

        for (int r = 0; r < n; r++) {
            for (int c = 0; c < n; c++) {
                if (grid[r][c] == 0) {
                    std::unordered_set<int> neighbors;

                    if (r > 0) neighbors.insert(grid[r - 1][c]);
                    if (c > 0) neighbors.insert(grid[r][c - 1]);
                    if (r < n - 1) neighbors.insert(grid[r + 1][c]);
                    if (c < n - 1) neighbors.insert(grid[r][c + 1]);

                    int area = 1;
                    for (int neighbor : neighbors) {
                        area += regionsArea[neighbor];
                    }

                    if (area > max) {
                        max = area;
                    }
                }
            }
        }

        return max;
    }

    int floodFill(std::vector<std::vector<int>>& grid, int r, int c, int region) {
        int n = grid.size();
        if (r < 0 || r >= n || c < 0 || c >= n || grid[r][c] != 1) {
            return 0;
        }

        grid[r][c] = region;

        int sum = 1;
        sum += floodFill(grid, r, c + 1, region);
        sum += floodFill(grid, r + 1, c, region);
        sum += floodFill(grid, r, c - 1, region);
        sum += floodFill(grid, r - 1, c, region);

        return sum;
    }
};
